set(CMAKE_POLICY_DEFAULT_CMP0077 NEW)
set(CMAKE_POLICY_DEFAULT_CMP0135 NEW)
cmake_minimum_required(VERSION 3.18)

project(WebEngine)

set_property(GLOBAL PROPERTY USE_FOLDERS ON)

if(MSVC)
    set(CMAKE_GENERATOR_PLATFORM ${CMAKE_VS_PLATFORM_NAME})
    set(CMAKE_BUILD_TYPE Debug)
endif()

set(WEB_ENGINE_EXTERNAL_INCLUDE_DIR ${CMAKE_SOURCE_DIR}/thirdparty/include)
set(WEB_ENGINE_EXTERNAL_LIBS_DIR ${CMAKE_SOURCE_DIR}/thirdparty/libs)
set(CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS ON)
set(BUILD_SHARED_LIBS ON CACHE BOOL "" FORCE)
set(CMAKE_DEBUG_POSTFIX "" CACHE BOOL "" FORCE)
set(LIBRARY_SUFFIX "" CACHE BOOL "" FORCE)

file(
    GLOB_RECURSE WEB_ENGINE_BINS_LIST
    "${CMAKE_SOURCE_DIR}/thirdparty/bins/*.*"
)

file(
    GLOB WEB_ENGINE_ASSETS_LIST
    "${CMAKE_SOURCE_DIR}/thirdparty/assets/*"
)

set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_SOURCE_DIR}/bin/${CMAKE_SYSTEM_NAME}/${CMAKE_GENERATOR_PLATFORM})
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_DEBUG ${CMAKE_SOURCE_DIR}/bin/${CMAKE_SYSTEM_NAME}/${CMAKE_GENERATOR_PLATFORM})
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE ${CMAKE_SOURCE_DIR}/bin/${CMAKE_SYSTEM_NAME}/${CMAKE_GENERATOR_PLATFORM})

foreach (BIN_FILE ${WEB_ENGINE_BINS_LIST})
    file(COPY ${BIN_FILE} DESTINATION ${CMAKE_RUNTIME_OUTPUT_DIRECTORY})
endforeach ()

foreach (ASSET_FILE ${WEB_ENGINE_ASSETS_LIST})
    file(COPY ${ASSET_FILE} DESTINATION ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/resources/assets)
endforeach ()

set(WEB_ENGINE_PROJECT "WebEngine")

file(
    GLOB_RECURSE WEB_ENGINE_CODE_LIST
    LIST_DIRECTORIES false
    "${CMAKE_SOURCE_DIR}/src/*.c*"
    "${CMAKE_SOURCE_DIR}/src/*.h*"
    "${CMAKE_SOURCE_DIR}/src/*.inl"
)

add_executable(${WEB_ENGINE_PROJECT} ${WEB_ENGINE_CODE_LIST})

target_compile_features(${WEB_ENGINE_PROJECT} PRIVATE cxx_std_17)
set_target_properties(${WEB_ENGINE_PROJECT} PROPERTIES LINK_FLAGS "--bind -sALLOW_MEMORY_GROWTH --preload-file ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}resources@/")
target_include_directories(${WEB_ENGINE_PROJECT} PRIVATE
    ${CMAKE_SOURCE_DIR}/src
    ${WEB_ENGINE_EXTERNAL_INCLUDE_DIR}
)
target_link_libraries(${WEB_ENGINE_PROJECT} ${WEB_ENGINE_BINS_LIST})

foreach(CODE_FILE IN ITEMS ${WEB_ENGINE_CODE_LIST})
    get_filename_component(CODE_FILE_PATH "${CODE_FILE}" PATH)
    file(RELATIVE_PATH CODE_FILE_RELATIVE_PATH "${CMAKE_SOURCE_DIR}/src" "${CODE_FILE_PATH}")
    string(REPLACE "\\" "/" GROUP_PATH "${CODE_FILE_RELATIVE_PATH}")
    file(RELATIVE_PATH EXTERNAL_INCLUDE_RELATIVE_PATH "${CMAKE_SOURCE_DIR}/src" "${WEB_ENGINE_EXTERNAL_INCLUDE_DIR}/")
    string(REPLACE ${EXTERNAL_INCLUDE_RELATIVE_PATH} "" GROUP_PATH "${GROUP_PATH}")
    string(REPLACE "src" "" GROUP_PATH "${GROUP_PATH}")
    source_group("${GROUP_PATH}" FILES "${CODE_FILE}")
endforeach()

add_custom_command(TARGET ${WEB_ENGINE_PROJECT} POST_BUILD
    COMMAND ${CMAKE_COMMAND} -E copy
        ${CMAKE_SOURCE_DIR}/src/index.html $<TARGET_FILE_DIR:${WEB_ENGINE_PROJECT}>/index.html)

add_custom_command(TARGET ${WEB_ENGINE_PROJECT} POST_BUILD
    COMMAND ${CMAKE_COMMAND} -E copy_directory
        ${CMAKE_SOURCE_DIR}/thirdparty/bootstrap $<TARGET_FILE_DIR:${WEB_ENGINE_PROJECT}>/bootstrap)

add_custom_command(TARGET ${WEB_ENGINE_PROJECT} POST_BUILD
    COMMAND ${CMAKE_COMMAND} -E copy_directory
        ${CMAKE_SOURCE_DIR}/src/shaders $<TARGET_FILE_DIR:${WEB_ENGINE_PROJECT}>/resources/shaders)

if(MSVC)
    set_property(DIRECTORY ${CMAKE_SOURCE_DIR} PROPERTY VS_STARTUP_PROJECT Engine)
endif()
